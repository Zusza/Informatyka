# Zad.1
# def czy_niemalejaca(T,n):
#     for i in range(n-1):
#         if T[i] > T[i+1]:
#             return False
#         return True
# def wyszukiwaniebinarne(T,a,n):
#     lewy = 0
#     prawy = n-1
#     while lewy<prawy:
#         srodek = (lewy+prawy)//2
#         if T[srodek] < a:
#             lewy = srodek+1
#         else:
#             prawy = srodek
#     return T[lewy] == a
#
# T = list(map(int, input().spilt()))
# a = int(input("Podaj ciąg"))
# if czy_niemalejaca(T, len(T)):
#     print(wyszukiwaniebinarne(T,a, len(T)))
# else:
#     print("Ciąg musi być niemalejący")

# Zad.2
# def czy_niemalejaca(T,n):
#     for i in range(n-1):
#         if T[i] > T[i+1]:
#             return False
#         return True
# def wyszukiwaniebinarnereku(T,a,lewy, prawy):
#     if lewy<prawy:
#         srodek = (lewy+prawy)//2
#         if T[srodek] < a:
#             return wyszukiwaniebinarnereku(T, a, srodek+1, prawy)
#         else:
#             return wyszukiwaniebinarnereku(T,a, lewy, srodek)
#     return T[lewy] == a
#
# T = list(map(int, input().split()))
# a = int(input("Podaj ciąg: "))
# if czy_niemalejaca(T, len(T)):
#     print(wyszukiwaniebinarnereku(T, a, 0, len(T)-1))
# else:
#     print("Ciąg musi być niemalejący")

# Zad.3 - Napisz program, który wyświetli na standardowym wyjściu te ciągi liczbowe z pliku ciagi.txt, które
# zawierają liczbę 10. Wykorzystaj wyszukiwanie binarne. W pliku ciagi.txt każdy wiersz zawiera jeden
# ciąg liczb całkowitych rozdzielonych spacjami.


# Done


# Zad.4 - Napisz program, który wyświetli na standardowym wyjściu te ciągi
# liczbowe z pliku ciagi2.txt, które zawierają liczbę 10. Wykorzystaj wyszukiwanie
# binarne. W pliku ciagi2.txt: Pierwszy wiersz – liczba ciągów w pliku
# Drugi wiersz – ile jest liczb w kolejnym wierszu
# Trzeci wiersz – pierwszy ciąg, który ma tyle liczb rozdzielonych spacją ile wskazuje liczba w
# poprzednim wierszu.
# Czwarty wiersz – ile jest liczb w kolejnym wierszu
# Piąty wiersz – drugi ciąg, który ma tyle liczb rozdzielonych spacją ile wskazuje liczba w poprzednim
# wierszu.
# itd.
# def wyszukiwaniebinarne(T,a,n):
#     lewy = 0
#     prawy = n-1
#     while lewy<prawy:
#         srodek = (lewy+prawy)//2
#         if T[srodek] < a:
#             lewy = srodek+1
#         else:
#             prawy = srodek
#     return T[lewy] == a
#
# plik = open("ciagi2.txt", "r")
# n = int(plik.readline().rstrip())
# for i in range(n):
#     d = int(plik.readline().rstrip())
#     ciag = list(map(int, plik.readline().split()))
#     if wyszukiwaniebinarne(ciag, 10, d):
#         print(ciag)
# plik.close()

# Zad.5 - Napisz algorytm w formie pseudokodu przyjmując, że elementy tablicy T indeksowane są od 1.
# Specyfikacja:
# Dane:
# a – liczba całkowita
# n – liczba całkowita dodatnia n oznaczającą liczbę elementów w tablicy T
# T[1..n] – tablica zawierająca n liczb uporządkowanych niemalejąco
# Wyniki:
# Wartość Prawda, gdy a należy do tablicy T, Fałsz w przeciwnym przypadku

# funkcja wyszukiwanie_binarne(T, a, n):
#   lewy ← 1
#   prawy ← n
#   dopóki lewy < prawy wykonuj:
#       srodek ← (lewy + prawy) div 2
#       jeżeli T[srodek] < a to:
#           lewy ← srodek +1
#       w przeciwnym wypadku:
#           prawy ← srodek
#   zwróć T[lewy] = a i zakończ

# Zad.7 (maturalne)
# n = 10
# A=[0,5,99,3,7,111,13,4,24,4,8]
# i = 1
# while i <= n:
#     if A[i] % 2 == 0:
#         w = A[i]
#         break
#     i = i + 1
# # print(w)

# pseudokod:
# i ← 1
# dopóki i <= n:
#     jeżeli A[i] mod 2 = 0 to:
#         w ← A[i]
#         zwróć w i zakończ
#       i ← i + 1
