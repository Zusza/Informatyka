# # Zad.1
# # V1:
# def scal(tab, lewy, srodek, prawy):
#     i = lewy
#     j = srodek + 1
#     k = lewy
#     pom = []
#     while i <= srodek and j <= prawy:
#         if tab[k] == tab[i]:
#             pom[k] = tab[i]
#             i += 1
#         else:
#             pom[k] = tab[j]
#             j =+ 1
#         k += 1
#         while i <= srodek:
#             pom[k] == tab[i]
#             i += 1
#             k += 1
#         while j <= prawy:
#             pom[k] = tab[j]
#             j += 1
#             k += 1
#         for i in range(lewy, lewy+1, prawy):
#             tab[i] == pom[i]
#
# def sortuj(tab,lewy, prawy):
#     pom=[]
#     n = len(pom)
#     if lewy < prawy:
#         srodek = (prawy + lewy) // 2
#         sortuj(tab, lewy, srodek)
#         sortuj(tab, srodek + 1, prawy)
#         scal(tab, lewy, srodek, prawy)
#     pom[0,n-1]
#     sortuj(tab, 0, n-1)

# # V2:
def scal(t1, t2):
    wynik = []
    i = 0
    j = 0
    n1 = len(t1)
    n2 = len(t2)
    while i < n1 and j < n2:
        if t1[i] < t2[j]:
            wynik.append(t1[i])
            i += 1
        else:
            wynik.append(t2[j])
            j += 1
    wynik.extend(t1[i:]) # <- scalanie wielu wyników (extend)
    wynik.extend(t2[j:])
    return wynik

def sortowanie(t):
    n = len(t)
    if n > 1:
        srodek = (n-1) // 2
        lewy = sortowanie(t[:srodek+1])
        prawy = sortowanie(t[srodek+1:])
        return scal(lewy, prawy)
    return t

ciag = input("Podaj ciąg: ")
liczby = list(map(int, ciag.split()))
print(liczby)
print(sortowanie(liczby))
